using System.Diagnostics;
using System.Text;
using OfficeOpenXml;
using Newtonsoft.Json;
using ExcelTool;

namespace ExecelTool
{
    /// <summary>
    /// 生成转配置工具
    /// </summary>
    internal class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");
            if (args == null || args.Length <= 0)
            {
                Console.WriteLine("请指定json文件");
                return;
            }

            string jsonPath = Path.GetFullPath(args[0]);
            if (!File.Exists(jsonPath))
            {
                Console.WriteLine($"json文件不存在：{jsonPath}");
                return;
            }

            string jsonContent = File.ReadAllText(jsonPath);
            CfgModel model = JsonConvert.DeserializeObject<CfgModel>(jsonContent);

            if (model == null)
            {
                Console.WriteLine($"配置数据类转换失败：{jsonPath}");
                return;
            }

            model.excelPath = Path.GetFullPath(model.excelPath);
            model.csFileOutputPaht = Path.GetFullPath(model.csFileOutputPaht);

            Console.WriteLine($"excel路径:{model.excelPath}");
            if (!Directory.Exists(model.excelPath))
            {
                Console.WriteLine($"excel路径不存在");
                return;
            }

            Stopwatch stopwatch = new Stopwatch();
            stopwatch.Start();

            try
            {
                Generate(model);
            }
            catch (Exception e)
            {
                Console.WriteLine(e.ToString());
                return;
            }

            //var r = Read();

            stopwatch.Stop();
            TimeSpan elapsedTime = stopwatch.Elapsed;

            Console.WriteLine("代码执行时间： " + elapsedTime);
            Console.ReadLine();
        }

        public static void GenerateInterface(string outputPath)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append($"/*\n * auto generated by tools(注意:此文件由程序生成，请勿手动修改)\n*/\n");
            sb.Append("using System;\nusing System.IO;\nusing System.Collections.Generic;\n\n");
            sb.Append("namespace Game.Cfg\n");
            sb.Append("{\n");

            sb.Append("\tpublic interface IBinarySerialize\n");
            sb.Append("\t{\n");
            sb.Append("\t\tvoid Serialize(BinaryWriter writer);\n");
            sb.Append("\t\tvoid Deserialize(BinaryReader reader);\n");
            sb.Append("\t}\n");

            sb.Append("\tpublic interface ICfg : IBinarySerialize\n");
            sb.Append("\t{\n");
            sb.Append("\t}\n");

            sb.Append("\tpublic interface ICfgList : IBinarySerialize\n");
            sb.Append("\t{\n");
            sb.Append("\t}\n");

            sb.Append("}\n");

            using (FileStream fs = new FileStream(Path.Combine(outputPath, $"CfgInterface.cs"), FileMode.Create))
            {
                var data = Encoding.Default.GetBytes(sb.ToString());
                fs.Write(data, 0, data.Length);
                fs.Flush();
                fs.Close();
            }

            sb.Clear();

            sb.Append($"/*\n * auto generated by tools(注意:此文件由程序生成，请勿手动修改)\n*/\n");
            sb.Append("using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Linq;\n");
            sb.Append("namespace Game.Cfg\n");
            sb.Append("{\n");

            sb.Append("\tpublic interface ICfgContainer : IBinarySerialize\n");
            sb.Append("\t{\n");
            sb.Append("\t}\n");

            sb.Append("\tpublic abstract class CfgContainerBase<T> : ICfgContainer where T : class, ICfg\n");
            sb.Append("\t{\n");

            sb.Append("\t\tpublic Dictionary<int, T> CfgMap { get; protected set; }\n");
            sb.Append("\t\tpublic abstract void Deserialize(BinaryReader reader);\n");
            sb.Append("\t\tpublic abstract void Serialize(BinaryWriter writer);\n");

            sb.Append("\t\tpublic virtual T Find(int id)\n");
            sb.Append("\t\t{\n");

            sb.Append("\t\t\tif (CfgMap == null)\n");
            sb.Append("\t\t\t{\n");
            sb.Append("\t\t\t\treturn null;\n");
            sb.Append("\t\t\t}\n");

            sb.Append("\t\t\tif (!CfgMap.ContainsKey(id))\n");
            sb.Append("\t\t\t{\n");
            sb.Append("\t\t\t\treturn null;\n");
            sb.Append("\t\t\t}\n");

            sb.Append("\t\t\treturn CfgMap[id];\n");
            sb.Append("\t\t}\n");

            sb.Append("\t\tpublic virtual T Find(Func<T, bool> func)\n");
            sb.Append("\t\t{\n");
            sb.Append("\t\t\tif (CfgMap == null)\n");
            sb.Append("\t\t\t{\n");
            sb.Append("\t\t\t\treturn null;\n");
            sb.Append("\t\t\t}\n");
            sb.Append("\t\t\treturn CfgMap.Values.Where(func).FirstOrDefault();\n");
            sb.Append("\t\t}\n");

            sb.Append("\t\tpublic virtual T FindAll(int id)\n");
            sb.Append("\t\t{\n");
            sb.Append("\t\t\tif (CfgMap == null)\n");
            sb.Append("\t\t\t{\n");
            sb.Append("\t\t\t\treturn null;\n");
            sb.Append("\t\t\t}\n");
            sb.Append("\t\t\treturn CfgMap.Values.ToList();\n");
            sb.Append("\t\t}\n");

            sb.Append("\t\tpublic virtual List<T> FindAll(Func<T, bool> func)\n");
            sb.Append("\t\t{\n");
            sb.Append("\t\t\tif (CfgMap == null)\n");
            sb.Append("\t\t\t{\n");
            sb.Append("\t\t\t\treturn null;\n");
            sb.Append("\t\t\t}\n");
            sb.Append("\t\t\treturn CfgMap.Values.Where(func).ToList();\n");
            sb.Append("\t\t}\n");

            sb.Append("\t}\n");

            sb.Append("}\n");

            using (FileStream fs = new FileStream(Path.Combine(outputPath, $"ICfgContainer.cs"), FileMode.Create))
            {
                var data = Encoding.Default.GetBytes(sb.ToString());
                fs.Write(data, 0, data.Length);
                fs.Flush();
                fs.Close();
            }
        }

        /// <summary>
        /// 语言配置
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public static List<(string, string)> GenerateLanguageCfg(CfgModel model)
        {

            List<(string, string)> languageHead = new List<(string, string)>();
            languageHead.Add(("Id", "int"));
            languageHead.Add(("Text", "string"));
            languageHead.Add(("Color", "int"));

            GenerateCfgCs("LanguageCfg", model.csFileOutputPaht, languageHead);
            Console.WriteLine("生成成功{0}", "LanguageCfg");

            List<(string, string)> values = new List<(string, string)>();

            string p = Path.Combine(model.excelPath, model.language);
            if (!Directory.Exists(p))
            {
                return values;
            }

            string[] paths = Directory.GetFiles(Path.Combine(model.excelPath, model.language), "*.xlsx", SearchOption.AllDirectories);

            int count = 0;

            for (int i = 0; i < paths.Length; i++)
            {
                //FileInfo fileInfo = new FileInfo(Path.GetFullPath(paths[i]));

                using (FileStream stream = new FileStream(Path.GetFullPath(paths[i]), FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                {
                    using (ExcelPackage package = new ExcelPackage(stream))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets[0];

                        int rowCount = worksheet.Dimension.Rows;
                        int colCount = worksheet.Dimension.Columns;

                        List<(string, string)> head = new List<(string, string)>();

                        count += (int)MathF.Max(0, rowCount - 4);

                        for (int row = 1; row <= rowCount; row++)
                        {
                            for (int col = 1; col <= colCount; col++)
                            {
                                if (worksheet.Cells[1, col].Value == null)
                                {
                                    continue;
                                }

                                if (row == 3)
                                {
                                    if (worksheet.Cells[row, col].Value == null)
                                    {
                                        continue;
                                    }

                                    string propName = worksheet.Cells[1, col].Value.ToString();
                                    propName = char.ToUpper(propName[0]) + propName[1..];

                                    string valueType = worksheet.Cells[row, col].Value.ToString().ToLower();
                                    head.Add((propName, valueType));
                                }

                                if (row > 4)
                                {
                                    string valueType = worksheet.Cells[3, col].Value.ToString().ToLower();
                                    string value;
                                    if (worksheet.Cells[row, col].Value == null)
                                    {
                                        if (valueType == "int")
                                        {
                                            value = "0";
                                        }
                                        else if (valueType == "bool")
                                        {
                                            value = "0";
                                        }
                                        else
                                        {
                                            value = string.Empty;
                                        }
                                    }
                                    else
                                    {
                                        value = worksheet.Cells[row, col].Value.ToString();
                                        if (valueType == "bool")
                                        {
                                            value = value == "0" ? "false" : "true";
                                        }
                                    }
                                    values.Add((valueType, value));
                                }
                            }
                        }                     
                    }
                }

            }

            values.Insert(0, ("int", count.ToString()));
            return values;
        }

        /// <summary>
        /// 普通配置
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public static List<(string, string)> GenerateNarmalCfg(CfgModel model)
        {
            List<(string, string)> values = new List<(string, string)>();

            foreach (var item in model.cfgList)
            {
                //FileInfo fileInfo = new FileInfo(Path.Combine(model.excelPath, item.excel));
                using (FileStream stream = new FileStream(Path.Combine(model.excelPath, item.excel), FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
                {
                    using (ExcelPackage package = new ExcelPackage(stream))
                    {

                        ExcelWorksheet worksheet = package.Workbook.Worksheets[0];

                        int rowCount = worksheet.Dimension.Rows;
                        int colCount = worksheet.Dimension.Columns;

                        List<(string, string)> head = new List<(string, string)>();

                        values.Add(("int", (MathF.Max(0, rowCount - 4).ToString())));

                        for (int row = 1; row <= rowCount; row++)
                        {
                            for (int col = 1; col <= colCount; col++)
                            {
                                if (worksheet.Cells[1, col].Value == null)
                                {
                                    continue;
                                }

                                if (row == 3)
                                {
                                    if (worksheet.Cells[row, col].Value == null)
                                    {
                                        continue;
                                    }

                                    string propName = worksheet.Cells[1, col].Value.ToString();
                                    propName = char.ToUpper(propName[0]) + propName[1..];

                                    string valueType = worksheet.Cells[row, col].Value.ToString().ToLower();
                                    head.Add((propName, valueType));
                                }

                                if (row > 4)
                                {
                                    string valueType = worksheet.Cells[3, col].Value.ToString().ToLower();
                                    string value;
                                    if (worksheet.Cells[row, col].Value == null)
                                    {
                                        if (valueType == "int")
                                        {
                                            value = "0";
                                        }
                                        else if (valueType == "bool")
                                        {
                                            value = "0";
                                        }
                                        else
                                        {
                                            value = string.Empty;
                                        }
                                    }
                                    else
                                    {
                                        value = worksheet.Cells[row, col].Value.ToString();
                                        if (valueType == "bool")
                                        {
                                            value = value == "0" ? "false" : "true";
                                        }
                                    }
                                    values.Add((valueType, value));
                                }
                            }
                        }
                        GenerateCfgCs(item.type, model.csFileOutputPaht, head);
                        Console.WriteLine("生成成功{0}", item.type);
                    }
                }
            }

            return values;
        }

        /// <summary>
        /// 生成配置的cs文件
        /// </summary>
        /// <param name="fileName"></param>
        /// <param name="outputPath"></param>
        /// <param name="head"></param>
        /// <returns></returns>
        public static string GenerateCfgCs(string fileName, string outputPath, List<(string, string)> head)
        {
            string excelName = fileName;

            StringBuilder sb = new StringBuilder();
            sb.Append($"/*\n * auto generated by tools(注意:此文件由程序生成，请勿手动修改)\n * {excelName}\n */\n");
            sb.Append("using System;\nusing System.IO;\nusing System.Collections.Generic;\n\n");

            sb.Append("namespace Game.Cfg\n");
            sb.Append("{\n");

            sb.Append("\t[Serializable]\n");
            sb.Append($"\tpublic partial class {excelName} : ICfg\n");
            sb.Append("\t{\n");

            foreach (var item in head)
            {
                sb.Append(string.Format("\t\tpublic {0} {1} {{get; private set;}} \n", item.Item2, item.Item1));
            }

            sb.Append("\t\tpublic void Deserialize(BinaryReader reader)\n");
            sb.Append("\t\t{\n");
            foreach (var item in head)
            {
                if (item.Item2 == "int")
                {
                    sb.Append($"\t\t\t{item.Item1} = reader.ReadInt32();\n");
                }
                else if (item.Item2 == "bool")
                {
                    sb.Append($"\t\t\t{item.Item1} = reader.ReadBoolean();\n");
                }
                else if (item.Item2 == "string")
                {
                    sb.Append($"\t\t\t{item.Item1} = reader.ReadString();\n");
                }
            }
            sb.Append("\t\t}\n");

            sb.Append("\t\tpublic void Serialize(BinaryWriter writer)\n");
            sb.Append("\t\t{\n");
            foreach (var item in head)
            {
                sb.Append($"\t\t\twriter.Write({item.Item1});\n");
            }
            sb.Append("\t\t}\n");
            sb.Append("\t}\n");

            sb.Append("\n\n");

            sb.Append("\t[Serializable]\n");
            sb.Append($"\tpublic partial class {excelName}Container : CfgContainerBase<{excelName}>\n");  //配置对应的容器类
            sb.Append("\t{\n");

            sb.Append("\t\tpublic override void Deserialize(BinaryReader reader)\n");
            sb.Append("\t\t{\n");

            sb.Append($"\t\t\tint count = reader.ReadInt32();\n");
            sb.Append($"\t\t\tCfgMap = new Dictionary<int, {excelName}>(count);\n");
            sb.Append($"\t\t\tfor (int i = 0; i < count; i++)\n");
            sb.Append("\t\t\t{\n");

            sb.Append($"\t\t\t\tvar item = new {excelName}();\n");
            sb.Append($"\t\t\t\titem.Deserialize(reader);\n");
            sb.Append($"\t\t\t\tCfgMap.Add(item.Id, item);\n");

            sb.Append("\t\t\t}\n");
            sb.Append("\t\t}\n");

            sb.Append("\t\tpublic override void Serialize(BinaryWriter writer)\n");
            sb.Append("\t\t{\n");

            sb.Append($"\t\t\twriter.Write(CfgMap.Count);\n");
            sb.Append($"\t\t\tforeach (var item in CfgMap.Values)\n");
            sb.Append("\t\t\t{\n");

            sb.Append($"\t\t\t\titem.Serialize(writer);\n");

            sb.Append("\t\t\t}\n");

            sb.Append("\t\t}\n");

            sb.Append("\t}\n");
            sb.Append("}\n");

            using (FileStream fs = new FileStream(Path.Combine(outputPath, $"{excelName}.cs"), FileMode.Create))
            {
                var data = Encoding.Default.GetBytes(sb.ToString());
                fs.Write(data, 0, data.Length);
                fs.Flush();
                fs.Close();
            }

            return excelName;
        }

        /// <summary>
        /// 生成容器类对应的字典类
        /// </summary>
        /// <param name="model"></param>
        public static void GenerateCfgMap(CfgModel model)
        {
            string outputPath = model.coreFileOutputPaht;

            string name = "GameCfgData";
            StringBuilder sb = new StringBuilder();
            sb.Append($"/*\n * auto generated by tools(注意:此文件由程序生成，请勿手动修改)\n * {name}\n */\n");
            sb.Append("using System;\nusing System.IO;\nusing System.Collections.Generic;\n\n");

            sb.Append("namespace Game.Cfg\n");
            sb.Append("{\n");

            sb.Append("\t[Serializable]\n");
            sb.Append($"\tpublic partial class {name} : IBinarySerialize\n");
            sb.Append("\t{\n");

            sb.Append("\t\tpublic Dictionary<Type, ICfgContainer> CfgDatas {get; private set;}\n");

            sb.Append("\t\tpublic void Deserialize(BinaryReader reader)\n");
            sb.Append("\t\t{\n");
            sb.Append("\t\t\tCfgDatas = new Dictionary<Type, ICfgContainer>();\n");

            sb.Append("\t\t\tvar _LanguageCfgContainer = new LanguageCfgContainer();\n");     //语言配置总是第一个
            sb.Append("\t\t\t_LanguageCfgContainer.Deserialize(reader);\n");
            sb.Append("\t\t\tCfgDatas.Add(typeof(LanguageCfg), _LanguageCfgContainer);\n");

            for (int i = 0; i < model.cfgList.Count; i++)
            {
                string typeName = model.cfgList[i].type;
                sb.Append($"\t\t\tvar _{typeName}Container = new {typeName}Container();\n");
                sb.Append($"\t\t\t_{typeName}Container.Deserialize(reader);\n");
                sb.Append($"\t\t\tCfgDatas.Add(typeof({typeName}), _{typeName}Container);\n");
            }
            sb.Append("\t\t}\n");

            sb.Append("\t\tpublic void Serialize(BinaryWriter writer)\n");
            sb.Append("\t\t{\n");
            sb.Append($"\t\t\tforeach (var item in CfgDatas.Values)\n");
            sb.Append("\t\t\t{\n");
            sb.Append($"\t\t\t\titem.Serialize(writer);\n");
            sb.Append("\t\t\t}\n");

            sb.Append("\t\t}\n");
            sb.Append("\t}\n");
            sb.Append("}\n");

            using (FileStream fs = new FileStream(Path.Combine(outputPath, $"{name}.cs"), FileMode.Create))
            {
                var data = Encoding.Default.GetBytes(sb.ToString());
                fs.Write(data, 0, data.Length);
                fs.Flush();
                fs.Close();
            }
        }

        /// <summary>
        /// 将配置数据写入字节文件
        /// </summary>
        /// <param name="values"></param>
        /// <param name="filePath"></param>
        public static void Witer(List<(string, string)> values, string filePath)
        {
            using (FileStream fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write))
            {
                using (BinaryWriter writer = new BinaryWriter(fileStream))
                {
                    foreach (var item in values)
                    {
                        string type = item.Item1;
                        if (type == "int")
                        {
                            writer.Write(Convert.ToInt32(item.Item2));
                        }
                        else if (type == "bool")
                        {
                            writer.Write(Convert.ToBoolean(item.Item2));
                        }
                        else if (type == "string")
                        {
                            writer.Write(item.Item2);
                        }
                    }
                    writer.Flush();
                }
            }
        }

        public static void Generate(CfgModel model)
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            foreach (string path in new List<string>() { model.coreFileOutputPaht, model.csFileOutputPaht }) 
            {
                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                    Console.WriteLine($"创建文件夹:{path}");
                }
                else
                {
                    //清空
                    string[] files = Directory.GetFiles(path);
                    foreach (string file in files)
                    {
                        File.Delete(file);
                    }
                }
            }

            GenerateInterface(model.coreFileOutputPaht);
            GenerateCfgMap(model);

            List<(string, string)> values = GenerateLanguageCfg(model);

            List<(string, string)> values1 = GenerateNarmalCfg(model);

            values.AddRange(values1);
            Witer(values, Path.Combine(model.cfgFileOutputPaht, "cfg.bytes"));
        }

        //public static GameCfgData Read()
        //{
        //    GameCfgData cfgData = new GameCfgData();
        //    string filePath = @"D:\workspace\MyExcelTool\Output\cfg.bytes";
        //    using (var fileStream = new FileStream(filePath, FileMode.Open))
        //    {
        //        using (var br = new BinaryReader(fileStream))
        //        {
        //            cfgData.Deserialize(br);
        //        }
        //    }
        //    return cfgData;
        //}
    }
}
